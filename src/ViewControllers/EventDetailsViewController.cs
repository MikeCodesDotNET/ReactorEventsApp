// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using CoreGraphics;
using Foundation;
using Humanizer;
using Humanizer.Localisation;
using ReactorTodayContainer.Helpers;
using SafariServices;
using UIKit;

namespace ReactorTodayContainer
{
	public partial class EventDetailsViewController : UIViewController
	{
        public ReactorToday.Shared.Models.Event EventObj { get; private set; }

        public EventDetailsViewController(IntPtr handle) : base(handle)
        {

        }

        public void SetEvent(ReactorToday.Shared.Models.Event ev)
        {
            this.EventObj = ev;
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            
            Title = EventObj.DisplayEventName;
            descriptionLabel.Text = EventObj?.EventDescription;
            startTimeLabel.Text = EventObj?.StartTime;
            endTimeLabel.Text = EventObj?.EndTime;

            var startText = EventObj.StartDate.Humanize();

            if (startText.Contains("ago"))
            {
                dayLabel.TextColor = "FB537B".ToUIColor();
                dayLabel.Text = $"Started {startText}";
            }
            else
            {
                dayLabel.Text = $"Starts {startText}";
            }

            if(!string.IsNullOrEmpty(EventObj.RegistrationLink) && EventObj.OpenRegistration == true)
            {
                registerForEventButton.Hidden = false;
                registerForEventButton.TouchUpInside += (sender, e) => 
                {
                    var sfViewController = new SFSafariViewController(new NSUrl(EventObj.RegistrationLink));
                    PresentViewControllerAsync(sfViewController, true);
                };
            }
            else
            {
                registerForEventButton.Hidden = true;
            }

            SetupTechnologyScrollBar();
        }

        void SetupTechnologyScrollBar()
        {
            nfloat h = 45.0f;
            nfloat w = 150;
            nfloat padding = 7.0f;
            nint n = EventObj.Technology.Count;

            var technologyLabels = new List<UILabel>();
            for (int j = 0; j < EventObj?.Technology.Count; j++)
            {
                var technology = EventObj.Technology[j];
                var techLabel = new UILabel
                {
                    Text = technology,
                    TextColor = UIColor.White,
                };

                var defaultColor = "4A90E2".ToUIColor();
                techLabel.BackgroundColor = defaultColor.Darken(j * 2);

                techLabel.Font = UIFont.FromName("AvenirNext-Medium", 13f);
                techLabel.Layer.CornerRadius = 3;
                techLabel.Layer.MasksToBounds = true;
                techLabel.TextAlignment = UITextAlignment.Center;

                technologyLabels.Add(techLabel);
            }

            var i = 0;
            while (i < n)
            {
                technologyLabels[i].Frame = new CGRect(padding * (i + 1) + (i * w), 0, w, h);
                technologyScrollView.AddSubview(technologyLabels[i]);
                i++;
            }

            technologyScrollView.ContentSize = new CGSize((w + padding) * n, h);
            technologyScrollView.AutoresizingMask = UIViewAutoresizing.FlexibleWidth;
            technologyScrollView.ShowsVerticalScrollIndicator = false;
            technologyScrollView.ShowsHorizontalScrollIndicator = false;
            technologyScrollView.AlwaysBounceHorizontal = true;
            technologyScrollView.AlwaysBounceVertical = false;
        }

    }
}
