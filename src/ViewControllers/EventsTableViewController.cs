// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CoreGraphics;
using Foundation;
using ReactorToday.Shared.Models;
using ReactorToday.Shared.Services;
using ReactorTodayContainer.Helpers;
using UIKit;
using Xamarin.Essentials;

namespace ReactorTodayContainer
{
    public partial class EventsTableViewController : UITableViewController
    {
        EventTableViewDataSource DataSource = new EventTableViewDataSource();
        UIRefreshControl refreshControl;

        public EventsTableViewController(IntPtr handle) : base(handle)
        {
        }

        public override async void ViewDidLoad()
        {
            base.ViewDidLoad();
            
            await DataSource.RefreshData();
            TableView.DataSource = DataSource;
            TableView.ReloadData();

            refreshControl = new UIRefreshControl();
            refreshControl.ValueChanged += Refresh;
            TableView.AddSubview(refreshControl);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);

            if(Preferences.Get("isDirty", false))
            {
                Refresh(this, null);
            }

        }

        public override void ViewDidLayoutSubviews()
        {
            base.ViewDidLayoutSubviews();
        }

        async void Refresh(object sender, EventArgs e)
        {
            await DataSource.RefreshData();
            TableView.ReloadData();

            refreshControl.EndRefreshing();
            TableView.ReloadData();
        }

        public override UIStatusBarStyle PreferredStatusBarStyle()
        {
            return UIStatusBarStyle.LightContent;
        }

        public override void PrepareForSegue(UIStoryboardSegue segue, NSObject sender)
        {
            base.PrepareForSegue(segue, sender);

            if (segue.Identifier != "showDetailsSegue")
                return;

            if (segue.DestinationViewController is EventDetailsViewController detailsController)
            {
                var selectedRowNumber = TableView.IndexPathForSelectedRow.Row;
                detailsController.SetEvent(DataSource.Events[selectedRowNumber]);
            }
        }

    }


  
    public class EventTableViewDataSource : UITableViewDataSource
    {
        public List<Event> Events { get; private set; }
        EventsService service = new EventsService();

        public async Task RefreshData()
        {
            if (Connectivity.NetworkAccess != NetworkAccess.Internet)
            {
                MonkeyCache.LiteDB.Barrel.Current.EmptyExpired();

                if(MonkeyCache.LiteDB.Barrel.Current.Exists("events"))
                {
                    //We don't have internets 
                    var events = MonkeyCache.LiteDB.Barrel.Current.Get<List<Event>>("events");
                    Events = events.FilterEvents();
                }
                else
                {
                    var okAlertController = UIAlertController.Create("I've no internets! ", "Life without internet is diffcult, why not take a break and try again in a bit", UIAlertControllerStyle.Alert);
                }
            }
            else 
            {
                try
                {
                    var events = await service.GetTodaysEventsAsync();
                    MonkeyCache.LiteDB.Barrel.Current.Add("events", events, TimeSpan.FromHours(12));

                    Events = events.FilterEvents();

                }
                catch(Exception ex)
                {
                    var errorAlertController = UIAlertController.Create("Error!! ", ex.Message, UIAlertControllerStyle.Alert);
                }

            }
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            string reuseIdentifier = "EventCell";
            EventCell cell = (EventCell)tableView.DequeueReusableCell(reuseIdentifier);

            if (cell == null)
                cell = new EventCell(new IntPtr());


            cell.Title = Events[indexPath.Row].Title;
            cell.Description = Events[indexPath.Row].EventDescription;
            cell.Location = Events[indexPath.Row].Location.Name;
            cell.StartTime = Events[indexPath.Row].StartTime;
            cell.EndTime = Events[indexPath.Row].EndTime;

            return cell;
        }

        public override nint RowsInSection(UITableView tableView, nint section)
        {
            return Events.Count;
        }
    }
}
